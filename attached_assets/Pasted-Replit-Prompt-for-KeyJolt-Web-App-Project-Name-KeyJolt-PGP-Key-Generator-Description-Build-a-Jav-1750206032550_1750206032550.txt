Replit Prompt for KeyJolt Web App
Project Name: KeyJolt PGP Key Generator
Description: Build a Java-based backend web application with a minimal, modern frontend in white and Twitter-blue (#1DA1F2) for generating PGP key pairs. The app, hosted at keyjolt.piapps.dev, takes user input (Name, Email Address, Desired PGP encryption strength, Key expiry) and generates a public and private PGP key pair, saved as <email>_<name>_pubkey_<keyID>.asc and <email>_<name>_seckey_<keyID>.asc. Optionally, it generates an SSH key pair for server access. Use a modern Java framework (e.g., Spring Boot) for the backend and a lightweight frontend (e.g., HTML/CSS with minimal JavaScript or a framework like Thymeleaf). Ensure security, usability, and compatibility with Replit’s environment.
Requirements
Backend:
Use Spring Boot for the REST API (simplifies setup on Replit).

Use Bouncy Castle library for PGP key generation (supports RSA key sizes like 2048, 4096; handles key expiry).

Optionally generate SSH key pairs using JSch or Apache MINA SSHD.

Validate inputs:
Name: Alphanumeric, max 50 chars, sanitized to avoid filesystem issues.

Email: Valid email format.

Encryption Strength: Dropdown with 2048, 3072, 4096 bits (default 4096).

Key Expiry: Integer (days, 0 for never), max 3650 (10 years).
Generate PGP key pairs with filenames like <email>_<name>_pubkey_<keyID>.asc and <email>_<name>_seckey_<keyID>.asc, where <keyID> is the key’s fingerprint (e.g., 10CD51FBA0CFA8D0).

Store keys temporarily on the server (Replit’s filesystem) and provide download links.

Optional SSH key generation (RSA, 2048/4096 bits) with filenames like <email>_<name>_ssh_{pub,priv}.key.

Securely handle private keys (delete after download or set short TTL).
Frontend:
Minimal, modern design with white background and Twitter-blue (#1DA1F2) accents (buttons, headers, borders).

Responsive form with fields: Name, Email, Encryption Strength (dropdown), Key Expiry (input with “0 for never” placeholder), and an SSH key generation checkbox.

Display download links for generated keys (public/private PGP, optional SSH keys).

Use HTML/CSS with minimal JavaScript or Thymeleaf for templating.

Include a simple header with “KeyJolt” logo and tagline (e.g., “Secure Keys, Instantly”).

Show error messages for invalid inputs (e.g., invalid email).
Deployment:
Host on Replit, accessible at keyjolt.piapps.dev (use Replit’s domain mapping or proxy).

Ensure Replit’s filesystem supports temporary key storage and downloads.

Use environment variables for sensitive configs (e.g., Bouncy Castle settings).
Dependencies (add to pom.xml for Maven):
spring-boot-starter-web (REST API and Thymeleaf support).

bcpg-jdk15on (Bouncy Castle for PGP).

jsch or mina-sshd (SSH key generation, optional).

spring-boot-starter-thymeleaf (optional, for templating).
Sample Code Structure
plaintext
keyjolt/
├── src/main/java/com/keyjolt/
│   ├── KeyjoltApplication.java        # Spring Boot main class
│   ├── controller/
│   │   └── KeyController.java        # REST endpoints for key generation
│   ├── service/
│   │   └── PgpKeyService.java        # PGP key generation logic
│   │   └── SshKeyService.java        # SSH key generation (optional)
│   ├── model/
│   │   └── KeyRequest.java           # DTO for user input
│   └── util/
│       └── FileUtils.java            # File handling for key storage
├── src/main/resources/
│   ├── templates/
│   │   └── index.html                # Thymeleaf/HTML frontend
│   ├── static/
│   │   ├── css/style.css             # White and Twitter-blue styling
│   │   └── js/script.js              # Minimal JavaScript (if needed)
│   └── application.properties        # Spring config (e.g., server port)
├── pom.xml                           # Maven dependencies
└── README.md                         # Project setup instructions
